# TODO : Split instructions into two ansible playbooks.  One for Initial Setup slash Environment assuredness.  The Second, for building and releasing kodi packages
#TODO: de-duplicate apt-get install package requests before putting into ansible playbook
# TODO: playbook must be run as root

# Dependencies:
sudo apt install --yes git python3 python3-pip python3-apt autoconf automake libtool libltdl-dev libao-dev libavahi-compat-libdnssd-dev avahi-daemon
pip3 install ansible

## Build libshairplay-dev
git clone https://github.com/juhovh/shairplay
cd shairplay
./autogen.sh
./configure
make -j 4
make install

sudo add-apt-repository -s ppa:team-xbmc/xbmc-nightly

sudo apt install debhelper autoconf automake autopoint gettext autotools-dev cmake curl default-jre doxygen gawk gcc gdc gperf libasound2-dev libass-dev libavahi-client-dev libavahi-common-dev libbluetooth-dev libbluray-dev libbz2-dev libcdio-dev libp8-platform-dev libcrossguid-dev libcurl4-openssl-dev libcwiid-dev libdbus-1-dev libdrm-dev libegl1-mesa-dev libenca-dev libflac-dev libflatbuffers-dev libfmt-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libfstrcmp-dev libgcrypt-dev libgif-dev libgles2-mesa-dev libgl1-mesa-dev libglu1-mesa-dev libgnutls28-dev libgpg-error-dev libgtest-dev libiso9660-dev libjpeg-dev liblcms2-dev libltdl-dev liblzo2-dev libmicrohttpd-dev libmysqlclient-dev libnfs-dev libogg-dev libpcre3-dev libplist-dev libpng-dev libpulse-dev libsmbclient-dev libspdlog-dev libsqlite3-dev libssl-dev libtag1-dev libtiff5-dev libtinyxml-dev libtool libudev-dev libva-dev libvdpau-dev libvorbis-dev libxmu-dev libxrandr-dev libxslt1-dev libxt-dev lsb-release meson nasm ninja-build python3-dev python3-pil python3-pip rapidjson-dev swig unzip uuid-dev yasm zip zlib1g-dev libcec-dev libfmt-dev liblircclient-dev liblirc-dev libglew-dev libwayland-dev libxkbcommon-dev waylandpp-dev wayland-protocols libgbm-dev libinput-dev libxkbcommon-dev doxygen libcap-dev libsndio-dev libmariadbd-dev ccache distcc scons libwayland-dev libwayland-egl1-mesa

# Cloning
## TODO : a variable switch for the latest release-branch name
git clone -b Matrix https://github.com/xbmc/xbmc kodi


# Build Tools
cd kodi

sudo make -C tools/depends/target/crossguid PREFIX=/usr/local
sudo make -C tools/depends/target/flatbuffers PREFIX=/usr/local
sudo make -C tools/depends/target/libfmt PREFIX=/usr/local
sudo make -C tools/depends/target/libspdlog PREFIX=/usr/local
sudo make -C tools/depends/target/wayland-protocols PREFIX=/usr/local
sudo make -C tools/depends/target/waylandpp PREFIX=/usr/local


mkdir /root/kodi-build
cd /root/kodi-build
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCORE_PLATFORM_NAME="x11 wayland gbm" \
	-DENABLE_INTERNAL_FLATBUFFERS=ON \
	-DENABLE_ALSA=ON -DENABLE_AIRTUNES=ON -DENABLE_UPNP=ON \
	-DENABLE_INTERNAL_FMT=ON -DENABLE_INTERNAL_RapidJSON=ON \
	-DENABLE_OPENGLES=ON -DENABLE_OPENGL=ON -DENABLE_X=ON \
	-DVERBOSE=OFF -DENABLE_NEON=ON \
	-DWITH_CPU=cortex-a73.cortex-a53 -DWITH_ARCH=aarch64 \
	-DENABLE_PULSEAUDIO=ON -DENABLE_CCACHE=ON \
	-DENABLE_INTERNAL_FFMPEG=ON \
	-DENABLE_APP_AUTONAME=ON -DENABLE_DVDCSS=ON -DENABLE_INTERNAL_CROSSGUID=ON -DENABLE_OPTICAL=ON \
	-DENABLE_EVENTCLIENTS=ON -DENABLE_CAP=ON \
	-DENABLE_VDPAU=ON \
	-DX11_RENDER_SYSTEM=gl \
	-DENABLE_MARIADBCLIENT=ON \
	-DENABLE_INTERNAL_DAV1D=ON \
	-DCMAKE_BUILD_TYPE=Release
	../kodi

# Only using 4 CPUs, because when I use all 6, the entire system crashes
cmake --build . -- VERBOSE=1 -j 4

